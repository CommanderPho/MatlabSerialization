//
//  MatlabSerializationTests.swift
//  MatlabSerializationTests
//
//  Created by Steve on 7/7/18.
//  Copyright Â© 2018 Steve. All rights reserved.
//

import XCTest
import CoreML
import CoreAudio
import AVFoundation
@testable import MatlabSerialization

public struct Basic {
    let a:String
    let b:Double
}

extension Array: MatlabEncodableArray where Element == Basic {
    public var keys: [String] {
        return ["a","b"]
    }
    
    public var columns:[[Any]] {
        let aArr = self.map{$0.a}
        let bArr = self.map{$0.b}
        return [aArr,bArr]
    }
}

class MatlabSerializationTests: XCTestCase {
    var byteIndex = 0
    var m = Data()
    
    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
        byteIndex = 0
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    func testArrStructs() {
        let basicArr: [Basic] = [Basic(a: "A", b: 1),Basic(a: "B", b: 2),Basic(a: "C", b: 3)]
        
        m = try!MatlabSerialization.data(withMatlabObject: basicArr)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 97)
        assertByte(with: 98)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 66)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 67)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
    }
    
    func testHeteroArray() {
        let arr:[Any] = ["A",[2.0],["C":3.0]]
        m = try!MatlabSerialization.data(withMatlabObject: arr)
        let bytes = [UInt8](m)
        print(bytes)

        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 67)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
    }
    
    func testMLMultiArray() {
        guard let mlMultiArray = try? MLMultiArray(shape:[2,2], dataType:.double) else {
            fatalError("Unexpected runtime error. MLMultiArray")
        }
        
        let arr = [Double](arrayLiteral:1,2,3,4)
        for (index, element) in arr.enumerated() {
            mlMultiArray[index] = NSNumber(floatLiteral:element)
        }
        m = try!MatlabSerialization.data(withMatlabObject: mlMultiArray)
        
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 16)
        assertByte(with: 64)
    }
    
    func testString() {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
        m = try!MatlabSerialization.data(withMatlabObject: "test")
//        [0;4;0;0;0;116;101;115;116]
        assertByte(with: 0)
        assertByte(with: 4)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 116)
        assertByte(with: 101)
        assertByte(with: 115)
        assertByte(with: 116)
    }
    
    func testCell() {
        m = try!MatlabSerialization.data(withMatlabObject: ["AB"])
        let bytes = [UInt8](m)
        print(bytes)
        assertByte(with: 36)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 66)
        assertByte(with: 24)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 133)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
    }
    
    func testLogical() {
        let array = [true,false]
        m = try!MatlabSerialization.data(withMatlabObject: array)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 39)
        assertByte(with: 133)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
    }
    
    func testStructsArr() {
        let dict:[[String:[Double]]] = [["A":[1.0,2.0]],["B":[2.0,3.0]]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 66)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
    }
    
    func testStructArr() {
        let dict:[String:[Double]] = ["A":[1.0,2.0,3.0]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
    }
    
    func testHomogArr() {
        let dict:[[String:Any]] = [["A":1.0],["B":"C"]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 66)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 67)
    }
    func testStructCharArr() {
        let dict:[String:[String]] = ["b":["a","b","c"]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 98)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 97)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 98)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 99)
    }
    
    func testStructStruct() {
        let dict:[String:Any] = ["A":["B":1.0] as [String:Double]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 66)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
    }
    
    func testStructString() {
        let dict:[String:String] = ["a":"test"]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 97)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 36)
        assertByte(with: 0)
        assertByte(with: 4)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 116)
        assertByte(with: 101)
        assertByte(with: 115)
        assertByte(with: 116)
        assertByte(with: 24)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 4)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 133)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
    }
    
    func testStructScalar() {
        let dict:[String:Double] = ["a":1]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 97)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
    }
    
    func assertByte(with: UInt8){
        XCTAssertEqual(m[byteIndex], with)
        byteIndex += 1
    }
}
